<?php

use Drupal\epsilon_harmony\EpsilonApiFactory;;

/**
 * @file
 * A client module to connect to Epsilon Harmony APIs.
 */

module_load_include('inc', 'epsilon_harmony', 'includes/Api/EpsilonApiFactory');

/**
 * Implements hook_menu().
 */
function epsilon_harmony_menu() {
  $items['admin/config/services/epsilon_harmony'] = array(
    'title' => 'Epsilon Harmony',
    'description' => 'Configure the Epsilon Harmony API Account and access logs.',
    'position' => 'right',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/services/epsilon_harmony/configurations'] = array(
    'title' => 'Configurations',
    'description' => 'Configure the Epsilon Harmony API Account.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('epsilon_harmony_config_form'),
    'access arguments' => array('administer epsilon harmony'),
    'file' => 'includes/Form/epsilon_harmony_form.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/epsilon_harmony/message_configuration'] = array(
    'title' => 'Message Configurations',
    'description' => 'Configure the Epsilon Harmony Message IDs.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('epsilon_harmony_message_form'),
    'access arguments' => array('administer epsilon harmony'),
    'file' => 'includes/Form/epsilon_harmony_form.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // Entity display page.
  $items['admin/config/services/epsilon_harmony/log/%epsilon_harmony_logs/details'] = array(
    'title' => 'Epsilon Harmony Log Details',
    'page callback' => 'epsilon_harmony_logs_details',
    'page arguments' => array(5),
    'access arguments' => array('access epsilon harmony logs'),
  );

  $items['admin/config/services/epsilon_harmony/testing'] = array(
    'title' => 'Test',
    'page callback' => 'epsilon_harmony_test_page_callback',
    'access callback' => TRUE,
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function epsilon_harmony_permission() {
  return array(
    'administer epsilon harmony' => array(
      'title' => t('Administer Epsilon Harmony'),
    ),
    'access epsilon harmony logs' => array(
      'title' => t('Access Epsilon Harmony Logs'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function epsilon_harmony_entity_info() {
  $info = array();
  $info['epsilon_harmony_logs'] = array(
    'label' => t('Epsilon Harmony Logs'),
    'controller class' => 'EntityEpsilonHarmonyLogsController',
    'fieldable' => TRUE,
    'entity class' => 'EpsilonHarmonyLog',
    'base table' => 'epsilon_harmony_logs',
    'uri callback' => 'epsilon_harmony_logs_uri',
    'entity keys' => array(
      'id' => 'log_id',
    ),
    'views controller class' => 'EntityEpsilonHarmonyLogsViewsController',
  );
  return $info;
}

/**
 * Implements hook_theme().
 */
function epsilon_harmony_theme() {
  $items = array();
  $path = drupal_get_path('module', 'epsilon_harmony') . '/templates';
  $items['epsilon_harmony_log'] = array(
    'template' => 'epsilon_harmony_log',
    'path' => $path,
  );
  return $items;
}

/**
 * Implements the uri callback for Epsilon Harmony Logs.
 */
function epsilon_harmony_logs_uri($log) {
  return array(
    'path' => 'admin/config/services/epsilon_harmony/log/' . $log->log_id . "/details",
  );
}

/**
 * Callback function for Epsilon Logs details page.
 *
 * @param object $entity
 *   Entity object of the log.
 */
function epsilon_harmony_logs_details($entity) {
  $data = array(
    'log_id' => $entity->log_id,
    'endpoint' => $entity->endpoint,
    'uid' => user_load($entity->uid),
    'status_code' => $entity->status_code,
    'status_message' => $entity->status_message,
    'header' => json_decode($entity->header),
    'request' => json_decode($entity->request),
    'response' => json_decode($entity->response),
    'created' => $entity->created,
  );
  $content = theme('epsilon_harmony_log', $data);
  return $content;
}

/**
 * Load an object of the Epsilon Harmony Logs entity.
 *
 * @param int $id
 *   Entity ID for the log to be loaded.
 * @param bool $reset
 *   Logical value indicating whether the cache is reset.
 *
 * @return object
 *   Object $epsilon_harmony_log or FALSE if it has not been set.
 */
function epsilon_harmony_logs_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $epsilon_harmony_log = epsilon_harmony_logs_load_multiple($ids, $reset);
  return $epsilon_harmony_log ? reset($epsilon_harmony_log) : FALSE;
}

/**
 * Load multiple Epsilon Harmony Logs entities.
 *
 * Calls the load() method of the entity controller.
 */
function epsilon_harmony_logs_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('epsilon_harmony_logs', $ids, $conditions, $reset);
}

/**
 * Call the save() controller method.
 */
function epsilon_harmony_logs_create() {
  global $user;
  // If sid is not set then initialize it to zero.
  $uid = (isset($uid) ? $uid : 0);
  $arrayEpsilonHarmonyLogs = array();
  $arrayEpsilonHarmonyLogs['uid'] = $user->uid;
  return entity_get_controller('epsilon_harmony_logs')->create($arrayEpsilonHarmonyLogs);
}

/**
 * Call the save() controller method.
 */
function epsilon_harmony_logs_save(&$entity) {
  return entity_get_controller('epsilon_harmony_logs')->save($entity);
}

/**
 * Callback function to log any epsilon log.
 */
function epsilon_harmony_log($logArr) {
  $epsilon_harmony_log_entity = epsilon_harmony_logs_create();
  foreach ($logArr as $key => $value) {
    $epsilon_harmony_log_entity->$key = $value;
  }
  epsilon_harmony_logs_save($epsilon_harmony_log_entity);
  return $epsilon_harmony_log_entity;
}

/**
 * Implements hook_views_api().
 */
function epsilon_harmony_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'epsilon_harmony') . '/views',
  );
}

/**
 * Callback function for the Test Page.
 */
function epsilon_harmony_test_page_callback() {
  $classObj = new EpsilonApiFactory();
  $classObj->testApi();
}
